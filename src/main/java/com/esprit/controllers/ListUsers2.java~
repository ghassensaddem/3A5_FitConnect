

package com.esprit.controllers;

import com.esprit.controllers.api.EventQRCodeGenerator;
import com.esprit.models.Event;
import com.esprit.models.activiteevent;
import com.esprit.models.typeactivite;
import com.esprit.services.EventService;
import com.esprit.services.activiteEventService;
import com.esprit.services.typeactiviteService;
import javafx.animation.PauseTransition;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.control.ChoiceBox;

import javafx.scene.control.ContextMenu;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.effect.DropShadow;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseButton;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;

import java.awt.*;
import java.io.File;
import java.io.FileWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Optional;

import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.util.Duration;
import org.controlsfx.control.Notifications;


import javafx.event.ActionEvent;               // Pour g√©rer les √©v√©nements d'action dans ton contr√¥leur
import javafx.fxml.FXML;                      // Pour l'annotation FXML
import javafx.util.Duration;                  // Pour la dur√©e des notifications
import org.controlsfx.control.Notifications;  // Pour utiliser les notifications
import javafx.geometry.Pos;                   // Pour d√©finir la position des notifications

import javafx.scene.media.*;


public class ListUsers2 {
    @FXML
    public TextField txtSearch;
    @FXML
    private ChoiceBox<String> critere;
    @FXML
    private TextField searchField;
    @FXML
    private GridPane usersGrid;
    @FXML
    private ScrollPane scrollPane;
    @FXML
    private Button btnplay;
    @FXML
    private Button btnplayy;
    private void setupSearchListener() {
        // V√©rifier que l'EventService est bien initialis√©
        EventService eventService = new EventService();
        if (eventService != null) { // Assure-toi que le service n'est pas nul
            txtSearch.textProperty().addListener((observable, oldValue, newValue) -> {
                if (newValue != null && !newValue.trim().isEmpty()) { // V√©rifier que le champ de recherche n'est pas vide
                    // Rechercher les √©v√©nements par nom
                    ArrayList<Event> filteredEvents = eventService.rechercherParNom(newValue);

                    if (filteredEvents != null) { // V√©rifier que la liste des √©v√©nements n'est pas nulle
                        usersGrid.getChildren().clear(); // Vider la grille avant d'afficher les nouveaux r√©sultats
                        populateUsersGrid(filteredEvents); // Afficher les √©v√©nements filtr√©s
                    } else {
                        // G√©rer le cas o√π la recherche retourne une liste vide ou nulle
                        usersGrid.getChildren().clear(); // On peut vider la grille si aucun √©v√©nement n'est trouv√©
                        // Optionnel : Afficher un message ou un indicateur pour les r√©sultats vides
                    }
                } else {
                    // G√©rer le cas o√π la recherche est vide
                    usersGrid.getChildren().clear(); // Vider la grille si le champ est vide
                }
            });
        } else {
            // Gestion d'une erreur si l'EventService est nul (rare, mais au cas o√π)
            System.out.println("Erreur: EventService non initialis√©.");
        }
    }


    public void initialize() {
        // Initialisation de la liste des √©v√©nements
        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);
        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
        scrollPane.setFitToWidth(true);
        scrollPane.setFitToHeight(false);

        EventService eventService = new EventService();
        ArrayList<Event> users = eventService.rechercher();
        usersGrid.getChildren().clear();
        populateUsersGrid(users);
        initializeChoiceBox();

        // Ajout de l'√©couteur sur le champ de recherche
        searchField.textProperty().addListener((observable, oldValue, newValue) -> {
            rechercherParNom(newValue);
        });

        // ‚úÖ Ajout de l'√©couteur de tri
        setupChoiceBoxListener();
    }
    private void initializeChoiceBox() {
        critere.getItems().addAll("Date", "Prix", "Lieu"); // Ajoutez les crit√®res de tri
        critere.getSelectionModel().selectFirst(); // S√©lectionne le premier √©l√©ment par d√©faut
    }

    private void setupChoiceBoxListener() {
        EventService eventService = new EventService(); // Instance du service

        critere.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {
            String tri = convertirCritere(newValue); // Convertir en colonne SQL
            ArrayList<Event> sortedEvents = eventService.affichageAvecTri(tri); // R√©cup√©rer les √©v√©nements tri√©s

            usersGrid.getChildren().clear(); // Vider la grille avant d'afficher les nouveaux r√©sultats
            populateUsersGrid(sortedEvents); // Afficher les √©v√©nements tri√©s
        });
    }

    private String convertirCritere(String critere) {
        switch (critere) {
            case "Date":
                return "date"; // Nom de la colonne dans la base de donn√©es
            case "Prix":
                return "prixdupass";
            case "Lieu":
                return "lieu";
            default:
                return "date"; // Par d√©faut, tri par date
        }
    }

    private void populateUsersGrid(ArrayList<Event> users) {
        int columns = 5;  // Nombre de colonnes souhait√©es
        int column = 0;
        int row = 2; // Commencer √† la ligne 2 pour laisser de la place aux labels

        usersGrid.getChildren().clear();
        usersGrid.getColumnConstraints().clear();
        usersGrid.getRowConstraints().clear();


        // üîπ Ajouter des contraintes de colonnes
        for (int i = 0; i < columns; i++) {
            ColumnConstraints colConstraints = new ColumnConstraints();
            colConstraints.setHgrow(Priority.ALWAYS);
            usersGrid.getColumnConstraints().add(colConstraints);
        }

        // üîπ Ajouter des contraintes de lignes
        int numRows = (int) Math.ceil(users.size() / (double) columns) + 2; // +2 pour les labels
        for (int i = 0; i < numRows; i++) {
            RowConstraints rowConstraints = new RowConstraints();
            rowConstraints.setVgrow(Priority.ALWAYS);
            usersGrid.getRowConstraints().add(rowConstraints);
        }

        // üîπ Ajouter les cartes des √©v√©nements
        for (Event user : users) {
            VBox userCard = createUserCard(user);
            usersGrid.add(userCard, column, row);

            column++;
            if (column == columns) { // Passer √† la ligne suivante si on atteint la limite
                column = 0;
                row++;
            }
        }

        // üîπ Modifier la hauteur minimum pour que la GridPane s'adapte bien avec le contenu
        usersGrid.setMinHeight(600); // Cette ligne peut √™tre ajust√©e pour ajuster la hauteur par d√©faut
        usersGrid.setPrefHeight(Region.USE_COMPUTED_SIZE); // Permet de s'ajuster √† la taille du contenu

        // üîπ Ajouter un ScrollPane (si ce n'est pas d√©j√† fait dans votre FXML)
        ScrollPane scrollPane = new ScrollPane();
        scrollPane.setContent(usersGrid);
        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);
        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);
        scrollPane.setFitToWidth(true);
        scrollPane.setFitToHeight(false);

        // Si vous avez d√©j√† un ScrollPane, vous n'avez peut-√™tre pas besoin de cette partie.
    }

    private VBox createUserCard(Event user) {
        VBox card = new VBox(10); // Espacement vertical entre les √©l√©ments
        card.setAlignment(Pos.CENTER);
        card.getStyleClass().add("user-card");
        card.setUserData(user);

        // üé® Ajout de l'effet d'ombre pour un meilleur design
        DropShadow shadow = new DropShadow();
        shadow.setRadius(10); // Taille de l'ombre
        shadow.setOffsetX(5); // D√©placement horizontal
        shadow.setOffsetY(5); // D√©placement vertical
        shadow.setColor(Color.rgb(0, 0, 0, 0.5)); // Couleur noire avec 50% d'opacit√©
        card.setEffect(shadow);

        // üîπ Forcer la taille de la carte
        card.setMinSize(250, 400);
        card.setPrefSize(250, 400);
        card.setMaxSize(250, 400);

        // üé® En-t√™te en vert (date) - prendre toute la largeur et arrondir
        StackPane header = new StackPane();
        header.getStyleClass().add("card-header");

        // ‚úÖ Ajouter du padding en bas pour espacer l'en-t√™te du reste
        header.setPadding(new Insets(0, 0, 15, 0));

        // üìÖ Date en blanc avec une taille plus grande
        TextField dateField = new TextField("üìÖ Date: " + (user.getDate() != null ? user.getDate() : "N/A"));
        dateField.setFont(new Font(18));
        dateField.setEditable(false);
        dateField.setStyle(
                "-fx-text-fill: white;" +
                        "-fx-background-color: transparent;" +
                        "-fx-border-color: transparent;" +
                        "-fx-border-width: 0;" +
                        "-fx-alignment: center;" +
                        "-fx-font-size: 24px;"
        );

        header.getChildren().add(dateField);
        StackPane.setAlignment(dateField, Pos.CENTER);

        // üñºÔ∏è Image - Agrandie et conservant le ratio
        ImageView imageView = new ImageView();
        if (user.getImage() != null && !user.getImage().isEmpty()) {
            imageView.setImage(new Image("file:" + user.getImage()));
        }
        imageView.setFitWidth(250);
        imageView.setFitHeight(210);
        imageView.setPreserveRatio(true);

        // Cr√©ation de l'effet d'ombre pour le label
        DropShadow labelShadow = new DropShadow();
        labelShadow.setRadius(5);
        labelShadow.setOffsetX(2);
        labelShadow.setOffsetY(2);
        labelShadow.setColor(Color.rgb(0, 0, 0, 0.3));

        // Cr√©ation du label avec les informations
        Label infoLabel = new Label("üïí Horaire: " + (user.getHoraire() != null ? user.getHoraire() : "N/A") +
                "\nüìç Lieu: " + (user.getLieu() != null ? user.getLieu() : "N/A") +
                "\nüí∞ Prix du Pass: " + (user.getPrixdupass() > 0 ? String.format("%.2f TND", user.getPrixdupass()) : "Gratuit"));

        infoLabel.getStyleClass().add("event-label");
        infoLabel.setWrapText(true);
        infoLabel.setFont(new Font(16));
        infoLabel.setEffect(labelShadow);

        // ‚úÖ Ajouter un espaceur pour forcer l'expansion de la carte
        Region spacer = new Region();
        VBox.setVgrow(spacer, Priority.ALWAYS);
        VBox.setMargin(imageView, new Insets(0, 0, -10, 0));

        // Menu contextuel pour le QR Code
        ContextMenu contextMenu = new ContextMenu();
        MenuItem addToCalendar = new MenuItem("üìÖ Ajouter au calendrier");
        addToCalendar.setOnAction(e -> {
            try {
                addEventToCalendar(user);
            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (URISyntaxException ex) {
                throw new RuntimeException(ex);
            }
        });
        contextMenu.getItems().add(addToCalendar);

        card.setOnMouseClicked(event -> {
            if (event.getButton() == MouseButton.SECONDARY) {
                contextMenu.show(card, event.getScreenX(), event.getScreenY());
            } else if (event.getButton() == MouseButton.PRIMARY) {
                try {
                    FXMLLoader loader = new FXMLLoader(getClass().getResource("/list2.fxml"));
                    Parent root = loader.load();
                    List2 controller = loader.getController();
                    controller.setEventId(user.getId());
                    card.getScene().setRoot(root);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });

        // üì¶ Ajout des √©l√©ments avec un bon espacement
        card.getChildren().addAll(header, imageView, spacer, infoLabel);

        return card;
    }

    private void createGridWithUserCards(ArrayList<Event> users) {
        // Cr√©er un GridPane
        GridPane gridPane = new GridPane();
        gridPane.setHgap(20);  // Espacement horizontal entre les √©l√©ments
        gridPane.setVgap(10);  // Espacement vertical entre les lignes de cartes
        gridPane.setPadding(new Insets(10)); // Padding autour du GridPane

        // Nombre de colonnes souhait√©es
        int columns = 2; // Ajustez le nombre de colonnes ici

        // Ajouter des contraintes de colonnes au GridPane (si n√©cessaire)
        for (int i = 0; i < columns; i++) {
            ColumnConstraints colConstraints = new ColumnConstraints();
            colConstraints.setHgrow(Priority.ALWAYS); // La colonne doit grandir en fonction de l'espace disponible
            gridPane.getColumnConstraints().add(colConstraints);
        }

        // Ajouter des cartes utilisateurs au GridPane
        for (int i = 0; i < users.size(); i++) {
            Event user = users.get(i);
            VBox userCard = createUserCard(user);  // Cr√©er la carte utilisateur

            // Calculer la ligne et la colonne o√π la carte doit √™tre ajout√©e
            int row = i / columns;  // Calcul de la ligne
            int col = i % columns;  // Calcul de la colonne

            // Si la ligne d√©passe la taille du GridPane, on ajoute une nouvelle ligne
            if (gridPane.getRowConstraints().size() <= row) {
                RowConstraints rowConstraints = new RowConstraints();
                rowConstraints.setVgrow(Priority.ALWAYS); // Laisser la ligne grandir selon l'espace disponible
                gridPane.getRowConstraints().add(rowConstraints);
            }

            // Ajouter la carte dans la cellule correspondante
            gridPane.add(userCard, col, row);
        }

        // Ajoutez gridPane √† un conteneur parent si n√©cessaire (ex. root.getChildren().add(gridPane));
    }
    private void rechercherParNom(String nom) {
        usersGrid.getChildren().clear(); // Effacer l'ancien contenu de la grille

        EventService eventService = new EventService(); // Cr√©er une instance du service
        ArrayList<Event> events = eventService.rechercherParNom(nom); // R√©cup√©rer les √©v√©nements filtr√©s

        populateUsersGrid(events); // Afficher les √©v√©nements filtr√©s dans la grille
    }

   //String path = "C:xampp/htdocs/3A5_FitConnect/src/main/java/com/esprit/media/event.mp3";
    String path = "C:\\xampp\\htdocs\\3A5_FitConnect\\src\\main\\java\\com\\esprit\\media\\event.mp3";
    Media media = new Media(new File(path).toURI().toString());
    MediaPlayer mediaPlayer = new MediaPlayer(media);

    @FXML
    private void pause(ActionEvent event) {

        mediaPlayer.pause();
        // Image img = new Image("fllogo.png");
        Notifications notificationBuilder = Notifications.create()
                .title("Musique")
                .text("      Musique Arr√™t√©e").hideAfter(Duration.seconds(5))
                .position(Pos.BOTTOM_RIGHT);
        notificationBuilder.darkStyle();
        notificationBuilder.show();
    }

    @FXML
    private void play(ActionEvent event) {

        mediaPlayer.play();
        //  Image img = new Image("C:\\Users\\Saleh\\Desktop\\GenesisTeam_MaktabtiApp\\DesktopApp\\src\\edu\\esprit\\gui\\images\\ticket.png");
        Notifications notificationBuilder = Notifications.create()
                .title("Musique")
                .text("      Musique Jou√©e").hideAfter(Duration.seconds(5))
                .position(Pos.BOTTOM_RIGHT);
        notificationBuilder.darkStyle();
        notificationBuilder.show();
    }
    private void addEventToCalendar(Event event) throws IOException, URISyntaxException {
        // Cr√©e un fichier ICS (format pour les √©v√©nements de calendrier)
        String fileName = "event_" + event.getId() + ".ics";
        FileWriter writer = new FileWriter(fileName);

        // Convertir la date (String -> LocalDate)
        String eventDate = event.getDate(); // Format attendu: "2025-02-28"
        LocalDate date = LocalDate.parse(eventDate, DateTimeFormatter.ofPattern("yyyy-MM-dd"));

        // Format pour la date ICS
        String formattedDate = date.format(DateTimeFormatter.ofPattern("yyyyMMdd"));

        writer.write("BEGIN:VCALENDAR\n");
        writer.write("VERSION:2.0\n");
        writer.write("BEGIN:VEVENT\n");
        writer.write("UID:" + event.getId() + "@esprit.tn\n");
        writer.write("DTSTAMP:" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd'T'HHmmss")) + "\n");
        writer.write("DTSTART:" + formattedDate + "\n");
        writer.write("SUMMARY: " + "√©v√©nnement sportive" + "\n"); // Titre de l'√©v√©nement
        writer.write("DESCRIPTION:" + "√©v√©nnement sportive qui vous int√©r√©sse" + "\n"); // D√©tails suppl√©mentaires
        writer.write("LOCATION:" + event.getLieu() + "\n");
        writer.write("END:VEVENT\n");
        writer.write("END:VCALENDAR\n");

        writer.close();

        // Ouvre le fichier ICS pour l'utilisateur
        Desktop.getDesktop().open(new File(fileName));

        // Ouvre le fichier dans Outlook (si configur√©)
       // Desktop.getDesktop().mail(new URI("mailto:?subject=Nouvel%20√©v√©nement&body=Veuillez%20ajouter%20cet%20√©v√©nement%20√†%20votre%20calendrier.&attachment=" + new File(fileName).toURI()));
        Runtime.getRuntime().exec("cmd /c start outlook.exe /import " + fileName);


        // Notification pour confirmer l'ajout
        Notifications.create()
                .title("Calendrier")
                .text("L'√©v√©nement sportif a √©t√© ajout√© au calendrier avec succ√®s !")
                .hideAfter(Duration.seconds(5))
                .position(Pos.BOTTOM_RIGHT)
                .darkStyle()
                .show();
    }


    public void profile(ActionEvent event) throws IOException {
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/Profile.fxml"));
        Parent root = loader.load();
        Stage stage = (Stage) searchField.getScene().getWindow();
        stage.getScene().setRoot(root);

        Profile p=loader.getController();
        p.initialize();

        stage.setMaximized(true);
    }


    public void activities(ActionEvent event) throws IOException {
        NAVIGATOR.changeScene(event, "/AffichageActivityFront.fxml");
    }

    public void programme(ActionEvent event) throws IOException {
        NAVIGATOR.changeScene(event, "/listProgramme.fxml");
    }

    public void equipement(ActionEvent event) throws IOException {
        NAVIGATOR.changeScene(event, "/market.fxml");
    }

    public void evennement(ActionEvent event) throws IOException {
        NAVIGATOR.changeScene(event, "/list.fxml");
    }
    public void forum(ActionEvent event) throws IOException {
        NAVIGATOR.changeScene(event, "/afficherPost.fxml");
    }
}
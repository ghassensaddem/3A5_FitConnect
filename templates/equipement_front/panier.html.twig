


{% block body %}
<div class="modal-overlay" id="cartModal"> 
  <div class="left-image-section" style="
        flex: 1;
        background: url('{{ asset('img/amir.jpg') }}') no-repeat center center;
        background-size: cover;
        min-height: 100vh;
        max-width: 67%; /* Couvre la moitié gauche */
    "></div>
    <div class="cart-container">
        <div class="cart-header">
            <div class="cart-title">Panier</div>
            <div class="cart-actions">
               <div class="delete-all" onclick="clearCart()" style="
                   display: flex;
                   align-items: center;
                   gap: 5px;
                   color: #666;
                   cursor: pointer;
                   padding: 5px 10px;
                   border-radius: 4px;
                   transition: all 0.2s;
               ">
                   <i class="fas fa-trash"></i>
                   <span>Effacer tout</span>
               </div>
         <div class="back-btn" onclick="redirectToEquipements()">
    <i class="fas fa-arrow-left"></i>
</div>
            </div>
        </div>
        
        <hr>
        
        <div class="cart-items">
            {% for commande in commandes %}
            <div class="cart-item">
                <div class="item-image">
                    {% if commande.equipement.image %}
                    <img src="{{ asset('uploads/images/' ~ commande.equipement.image) }}" alt="{{ commande.equipement.nom }}">
                    {% else %}
                    <i class="fas fa-desktop"></i>
                    {% endif %}
                </div>
                <div class="item-details">
                    <div class="item-name">{{ commande.equipement.nom }}</div>
                    <div class="item-dimensions">{{ commande.equipement.description}}</div>
                    <div class="item-quantity">
                        <div class="quantity-btn" 
                             onclick="updateQuantity({{ commande.id }}, -1, this)"
                             {% if commande.quantite <= 1 %}style="opacity: 0.5; cursor: not-allowed;"{% endif %}>
                            -
                        </div>
                        <div class="quantity-value">{{ commande.quantite }}</div>
                        <div class="quantity-btn" 
                             onclick="updateQuantity({{ commande.id }}, 1, this)"
                             {% if commande.quantite >= commande.equipement.quantiteStock %}style="opacity: 0.5; cursor: not-allowed;"{% endif %}>
                            +
                        </div>
                    </div>
                </div>
                <div class="item-price" data-unit-price="{{ commande.equipement.prix }}">
                    {{ (commande.equipement.prix * commande.quantite)|number_format(3, '.', ' ') }} DT
                </div>
                <div class="delete" onclick="removeItem({{ commande.id }}, this)" style="
                    display: flex;
                    align-items: center;
                    gap: 5px;
                    color: #666;
                    cursor: pointer;
                    padding: 5px 10px;
                    border-radius: 4px;
                    transition: all 0.2s;
                ">
                    <i class="fas fa-trash"></i>
                    <span>Effacer</span>
                </div>
            </div>
            {% else %}
            <div style="padding: 20px; text-align: center;">Votre panier est vide</div>
            {% endfor %}
        </div>
        
        <hr>
        
        <div class="cart-summary">
            <div class="subtotal">
                <span class="subtotal-label">Sous-total:</span>
                <span class="subtotal-value">{{ total|number_format(0, '.', ' ') }} DT</span>
            </div>
            <div class="summary-note">
                Le prix final et les réductions seront déterminés au moment du traitement du paiement.
            </div>
           <button class="checkout-btn" onclick="passerCommande()">Passer commande</button>

<script>
function passerCommande() {
    if (confirm('Confirmez-vous cette commande ?')) {
        fetch('{{ path("app_passer_commande") }}', {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (response.redirected) {
                window.location.href = response.url;
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Une erreur est survenue');
        });
    }
}
</script>
        </div>
    </div>
</div>
{% endblock %}

{% block stylesheets %}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<style>
    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    body {
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: flex-end;
        height: 140vh;
    }
    
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        display: flex;
        justify-content: flex-end;
        backdrop-filter: blur(5px);
        -webkit-backdrop-filter: blur(5px);
    }
    
    .cart-container {
        width: 450px;
        background-color: white;
        height: 100vh;
        padding: 20px;
        display: flex;
        flex-direction: column;
        box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
        overflow-y: auto;
    }
    
   
    .cart-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }
    .cart-title {
        font-size: 24px;
        font-weight: bold;
    }
    
    .cart-actions {
        display: flex;
        align-items: center;
        gap: 20px;
    }
    
    .delete-all {
        display: flex;
        align-items: center;
        gap: 5px;
        color: #666;
        cursor: pointer;
    }
    
    .delete-all:hover {
        color: #333;
    }
    .delete {
        display: flex;
        align-items: center;
        gap: 5px;
        color: #666;
        cursor: pointer;
    }
    
    .delete:hover {
        color: #333;
    }
    
.back-btn {
    font-size: 20px;
    cursor: pointer;
    margin-right: 10px;
    color: #666;
    transition: transform 0.2s;
}

.back-btn:hover {
    color: #333;
    transform: translateX(-3px); /* Effet de déplacement vers la gauche */
}
    
    hr {
        border: none;
        border-top: 1px solid #eee;
        margin: 15px 0;
    }
    
    .cart-item {
        display: flex;
        gap: 15px;
        padding: 15px 0;
        position: relative;
    }
    
    .item-image {
        width: 120px; /* Augmenté de 80px à 120px */
        height: 120px; /* Augmenté de 80px à 120px */
        background-color: #f5f5f5;
        border-radius: 5px;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }
    
    .item-image img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }
    
    .item-image .fa-desktop {
        color: #ccc;
        font-size: 40px; /* Augmenté de 30px à 40px */
    }
    
    .item-details {
        flex: 1;
        padding-right: 80px; /* Espace pour le prix */
    }
    
    .item-name {
        font-weight: bold;
        margin-bottom: 5px;
    }
    
    .item-dimensions {
        color: #666;
        font-size: 14px;
        margin-bottom: 10px;
    }
    
    .item-price {
        position: absolute;
        right: 0;
        top: 15px;
        font-weight: bold;
        font-size: 16px;
        padding-right: 10px;
    }
    
    .item-quantity {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-top: 10px;
    }
    
    .quantity-btn {
        width: 25px;
        height: 25px;
        border: 1px solid #ddd;
        background-color: #f9f9f9;
        border-radius: 3px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }
    
    .quantity-value {
        min-width: 20px;
        text-align: center;
    }
    
    .cart-summary {
        margin-top: auto;
        padding: 20px 0;
    }
    
    .subtotal {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
    }
    
    .subtotal-label {
        font-weight: bold;
    }
    
    .subtotal-value {
        font-weight: bold;
        font-size: 18px;
    }
    
    .summary-note {
        color: #666;
        font-size: 14px;
        margin-bottom: 20px;
    }
    
    .checkout-btn {
        background-color: #000;
        color: white;
        border: none;
        padding: 15px;
        width: 100%;
        font-weight: bold;
        font-size: 16px;
        cursor: pointer;
        border-radius: 5px;
        text-transform: uppercase;
    }
    
    .checkout-btn:hover {
        background-color: #333;
    }
    .highlight {
    animation: pulse 1s;
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); color: #2ecc71; }
    100%
     { transform: scale(1); color: inherit; }
}
/* Style pour les messages d'alerte */
.alert-message {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 15px;
    border-radius: 5px;
    z-index: 10000;
    max-width: 300px;
    animation: slideIn 0.5s, fadeOut 0.5s 2.5s forwards;
}

.alert-warning {
    background-color: #fff3cd;
    color: #856404;
    border-left: 4px solid #ffeeba;
}

.alert-error {
    background-color: #f8d7da;
    color: #721c24;
    border-left: 4px solid #f5c6cb;
}

@keyframes slideIn {
    from { transform: translateX(100%); }
    to { transform: translateX(0); }
}

@keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
}

.cart-item {
    transition: all 0.3s ease;
    overflow: hidden;
}

.delete, .delete-all {
    cursor: pointer;
    transition: color 0.2s;
}

.delete:hover, .delete-all:hover {
    color: #ff4757 !important;
}







    
  
</style>
{% endblock %}
<script>
async function updateQuantity(commandeId, change, element) {
    const container = element.closest('.cart-item');
    const quantityElement = container.querySelector('.quantity-value');
    const priceElement = container.querySelector('.item-price');
    const unitPrice = parseFloat(priceElement.dataset.unitPrice);
    const currentQuantity = parseInt(quantityElement.textContent);
    let newQuantity = currentQuantity + change;

    // Récupérer la quantité max disponible depuis le DOM
    const plusBtn = container.querySelector('.quantity-btn:last-child');
    const maxQuantity = plusBtn.hasAttribute('data-max') ? 
                        parseInt(plusBtn.getAttribute('data-max')) : 
                        Infinity;

    if (newQuantity < 1) newQuantity = 1;
    if (newQuantity > maxQuantity) {
        showAlert('Stock limité', 'Quantité maximale disponible: ' + maxQuantity, 'warning');
        newQuantity = maxQuantity;
    }

    const buttons = container.querySelectorAll('.quantity-btn');
    buttons.forEach(btn => btn.disabled = true);

    try {
        quantityElement.textContent = newQuantity;
        priceElement.textContent = (unitPrice * newQuantity).toFixed(3) + ' DT';

        // Mettre à jour l'état des boutons +/-
        container.querySelector('.quantity-btn:first-child').style.opacity = newQuantity <= 1 ? "0.5" : "1";
        container.querySelector('.quantity-btn:last-child').style.opacity = newQuantity >= maxQuantity ? "0.5" : "1";

        const response = await fetch('{{ path("app_update_quantity") }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
                id: commandeId,
                quantity: newQuantity
            })
        });

        const data = await response.json();
        
        if (!data.success) {
            if (data.limitedQuantity) {
                quantityElement.textContent = data.limitedQuantity;
                priceElement.textContent = (unitPrice * data.limitedQuantity).toFixed(3) + ' DT';
                showAlert('Stock limité', 'La quantité a été réduite au stock disponible (' + data.limitedQuantity + ')', 'warning');
            } else {
                throw new Error(data.message);
            }
        }

        updateCartTotal();

    } catch (error) {
        console.error('Erreur:', error);
        quantityElement.textContent = currentQuantity;
        priceElement.textContent = (unitPrice * currentQuantity).toFixed(3) + ' DT';
        showAlert('Erreur', error.message, 'error');
    } finally {
        buttons.forEach(btn => btn.disabled = false);
    }
}
function updateCartTotal() {
    let total = 0;
    document.querySelectorAll('.cart-item').forEach(item => {
        const priceElement = item.querySelector('.item-price');
        total += parseFloat(priceElement.textContent);
    });
    
    document.querySelector('.subtotal-value').textContent = total.toFixed(3) + ' DT';
}

// Fonction pour afficher des notifications (à ajouter)
function showAlert(title, message, type = 'success') {
    // Utilisez votre système de notification préféré (Toastify, SweetAlert, etc.)
    // Exemple avec SweetAlert2:
    if (typeof Swal !== 'undefined') {
        Swal.fire(title, message, type);
    } else {
        // Fallback simple
        alert(title + ': ' + message);
    }
}
async function removeItem(commandeId, element) {
    const cartItem = element.closest('.cart-item');
    
    if (!confirm('Voulez-vous vraiment supprimer cet article du panier ?')) {
        return;
    }

    try {
        const response = await fetch('{{ path("app_remove_item", {id: 'PLACEHOLDER'}) }}'.replace('PLACEHOLDER', commandeId), {
            method: 'DELETE',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });

        const data = await response.json();
        
        if (data.success) {
            // Suppression visuelle avec animation
            cartItem.style.transition = 'all 0.3s ease';
            cartItem.style.opacity = '0';
            cartItem.style.height = '0';
            cartItem.style.padding = '0';
            cartItem.style.margin = '0';
            cartItem.style.border = 'none';
            
            setTimeout(() => {
                cartItem.remove();
                updateCartTotal();
                showAlert('Succès', 'Article supprimé du panier', 'success');
            }, 300);
        } else {
            throw new Error(data.message || 'Erreur lors de la suppression');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showAlert('Erreur', error.message, 'error');
    }
}
async function clearCart() {
    if (!confirm('Voulez-vous vraiment vider tout votre panier ?')) {
        return;
    }

    try {
        const response = await fetch('{{ path("app_clear_cart") }}', {
            method: 'DELETE',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });

        const data = await response.json();
        
        if (data.success) {
            // Suppression visuelle de tous les éléments
            const cartItems = document.querySelectorAll('.cart-item');
            cartItems.forEach(item => {
                item.style.transition = 'all 0.3s ease';
                item.style.opacity = '0';
                item.style.height = '0';
                item.style.padding = '0';
                item.style.margin = '0';
                item.style.border = 'none';
            });

            setTimeout(() => {
                document.querySelector('.cart-items').innerHTML = `
                    <div style="padding: 20px; text-align: center;">Votre panier est vide</div>
                `;
                updateCartTotal();
                showAlert('Succès', 'Panier vidé avec succès', 'success');
            }, 300);
        } else {
            throw new Error(data.message || 'Erreur lors de la suppression');
        }
    } catch (error) {
        console.error('Erreur:', error);
        showAlert('Erreur', error.message, 'error');
    }
}
function redirectToEquipements() {
    window.location.href = '{{ path("app_equipement_front") }}';
}
function passerCommande() {
    if (confirm('Confirmez-vous cette commande ?')) {
        fetch('{{ path("app_passer_commande") }}', {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (response.redirected) {
                window.location.href = response.url;
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Une erreur est survenue');
        });
    }
}

</script>